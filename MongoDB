#Robert3T和Python在MongDB操作

#3T查询
db.getCollection('collection_name').find({}) #查询all

  #条件查询的格式find({条件},{显示哪些字段}).sort({某字段排序}).limit(nums)
  db.getCollection('collection_name').find({'_id':{'$gte':t1,'$lte':t2},'OAT':{'$exists':true}},{'OAT':1}).sort({'_id':-1}).limit(100) 
          #查询_id在t1和t2之间，并且OAT的值存在;仅显示OAT列,按倒叙显示100条
        
#Python查询
db['collection_name'].find({'OAT':{'$exists':true},'_id':{'$gte':t1}},{'_id':1,'OAT':1}).sort('_id',-1) #查询_id大于t1，OAT存在；按倒叙显示_id和OAT列的值

#find()和find_one()区别：
find_one() 返回的是一个对象（字典类型）；对find_one()返回的值，再套一层list(db[plant].find_one()),返回的则是列的名称.....
        >>>list(dict)，返回的是字典的key值组成的列表list({'a':1,'b':2}),返回[a,b]
find() 返回的是一个数组，数组里面是对象；


#3T删除
db.getCollection('collection_name').remove({'_id':{'$gte':t1}}) #删除_id大于t1的值，按行删除

db.getCollection('collection_name').update({'_id':{'$gte':t1,'$lte':t2}},{'$unset':{'OAT':1}},false,true) #false和true分别代表upsert和multi #删除OAT列中_id在t1和t2之间的数 
  #引申，如果要添加列，则为$set
 
#3T更新
db.getCollection('collection_name').update({'_id':{'$gte':t1,'$lte':t2}},{'$set':{'lastRunTime':0}},false,true) #false和true分别代表upsert和multi
  
#pymongo 查询列名的三种方式：
#法1
s1 = time.time()
if Plant == 'plant_Changi Airport Terminal 4_plt1':
    Plan_A = list(DB[Plant].find_one({'_id': {'$type': 1, '$gte': 1604418720}}))
e1 = time.time()
print(Plan_A)
print('A_time:',e1 -s1)
############
#法2:https://stackoverflow.com/questions/2298870/get-names-of-all-keys-in-the-collection ; https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/
s2 = time.time()
if Plant == 'plant_Changi Airport Terminal 4_plt1':
    cursor = DB[Plant].aggregate([
            {'$match': {'_id': {'$ne': 'info','$gte': 1604418720}}},
            {"$project": {"arrayofkeyvalue": {"$objectToArray": "$$ROOT"}}},    # 1. "$$ROOT" for referencing the top level document; 2. '$objectToArray'将top key-value转化为document array
            {"$unwind": "$arrayofkeyvalue"},                                    #{ $unwind: <field path> } 将array进行拆分，最终为dict的形式，具体参考文档
            {"$group": {"_id": '', "allkeys": {"$addToSet": "$arrayofkeyvalue.k"}}}  # 以_id 作为聚合条件，dict的key值去重添加到‘allkeys’中，即{‘allkeys’:[key1,key2....]}
        ])
    result = cursor.next()  #return the next document in a cursor.
    result = result.get('allkeys')
print(result)
e2 = time.time()
print('B_time:', e2 - s2)

##########################
法3：
s3 = time.time()
if Plant == 'plant_Changi Airport Terminal 4_plt1':
    Plan_B =  DB[Plant].find({'_id': {'$type': 1, '$gte': 1604418720}})
    list1 = []
    for i in Plan_B:
        list1.extend(i.keys())
    list1 = list(set(list1))
    print(list1)
e3 = time.time()
print('C_time:', e3 - s3)
        #     test End
