# resample():重采样

resample(rule,how=None,axis=0,fill_method=None,closed=None,label=None,convention='start',kind=None,loffset=None,base=0,on=None,level=None)

Parameters
----------
#label(标签)closed(闭合)：   https://blog.csdn.net/qq_15407209/article/details/85308687
label = 'left': 左标签，显示区间的左边值
closed = 'left' 左闭合，区间为左闭右开，即[a,b)

closed : {'right', 'left'}
        Which side of bin interval is closed. The default is ‘left’ for all frequency offsets 
        except for ‘M’, ‘A’, ‘Q’, ‘BM’, ‘BA’, ‘BQ’, and ‘W’ which all have a default of ‘right’.
label : {'right', 'left'}
        Which bin edge label to label bucket with. The default is ‘left’ for all frequency offsets
        except for ‘M’, ‘A’, ‘Q’, ‘BM’, ‘BA’, ‘BQ’, and ‘W’ which all have a default of ‘right’.

Example1(降采样):

1. 首先先来创建一个时间序列，起始日期是2018/01/01，一共12天，每天对应的数值分别是1到12：
rng = pd.date_range('20180101', periods=12)
ts = pd.Series(np.arange(1,13), index=rng)
print(ts)

#### Outputs ####
2018-01-01     1
2018-01-02     2
2018-01-03     3
2018-01-04     4
2018-01-05     5
2018-01-06     6
2018-01-07     7
2018-01-08     8
2018-01-09     9
2018-01-10    10
2018-01-11    11
2018-01-12    12
Freq: D, dtype: int32

2. 下面使用resample方法来做降采样处理，频率是5天，上面提到的两个参数，都使用默认值：
ts_5d = ts.resample('5D').sum()  #closed默认的值是'left'。
print(ts_5d)

#### Outputs ####
2018-01-01    15
2018-01-06    40
2018-01-11    23
Freq: 5D, dtype: int32

实际上，这三个5天就是三个区间了。和数学里区间的概念一样，区间有开和闭的概念。在resample中，区间的开和闭，就是通过closed这个参数来控制。用数学符号表示的话:
closed = 'left' 左闭右开
上面的三个5天可以由以下的三个左闭右开的区间构成：
区间1：[1, 6)
区间2: [6, 11)
区间3：[11, 16) 例子中，时间只到12号为止，但是这里会往后补足5天

现在，在这三个区间上做数据聚合也就很好理解了。对于区间1进行求和，也就是1、2、3、4、5这5天的值求和即可。区间2和区间3也是同理

3. 那如果把closed的值改为'right'，结果有是怎么样的？
ts_5d_rightclosed = ts.resample('5D', closed='right').sum()  #default:label='left'
print(ts_5d_rightclosed)

#### Outputs ####
2017-12-27     1
2018-01-01    20
2018-01-06    45
2018-01-11    12
Freq: 5D, dtype: int32

怎么会这样？为什么变成了四个区间？closed=right到底做了什么？
别着急，我们来一步一步看看，这其中发生了什么事情。原始的时间序列是从18年1月1号到1月12号，一共12天。以5天为单位降采样处理后，变成了三个5天，分别是：

第一个5天：1-2-3-4-5-6
第二个5天：6-7-8-9-10-11
第三个5天：12-13-14-15-16

closed = 'right' 左开右闭
上面的三个5天可以由以下的四个左开右闭的区间构成。🐖🐖🐖🐖🐖注意，由于第一个5天是从1号到6号，但由于是左开区间，1号就落不到1到6号的那个区间，所以要往前补足：

区间1：(27, 1]
区间2：(1, 6]
区间3: (6, 11]
区间4：(11, 16]

现在，在这四个区间上做数据聚合也是一样的道理了：对于区间1，是对28，29，30，31，1这五天的值求和（这里只有1号是有值的），其余的区间也是同理，但需要注意是左开右闭。

#################################
Default: label='left'

1. 下面在closed='right'的基础上，将label设置为right：
ts_5d_rightclosed_rightlable = ts.resample('5D', closed='right', label='right').sum()
print(ts_5d_rightclosed_rightlable)

#### Outputs ####
2018-01-01     1
2018-01-06    20
2018-01-11    45
2018-01-16    12
Freq: 5D, dtype: int32

###################################
ffill():
s = pd.Series([1, 2, 3],index=pd.date_range('20180101', periods=3, freq='min'))
print(s)
>>>
2018-01-01 00:00:00    1
2018-01-01 00:01:00    2
2018-01-01 00:02:00    3
Freq: S, dtype: int64
---------------
data = s.resample('15s').ffill()
print(data)
2018-01-01 00:00:00    1
2018-01-01 00:00:15    1
2018-01-01 00:00:30    1
2018-01-01 00:00:45    1
2018-01-01 00:01:00    2
2018-01-01 00:01:15    2
2018-01-01 00:01:30    2
2018-01-01 00:01:45    2
2018-01-01 00:02:00    3
Freq: 15S, dtype: int64
----------------------
🐖🐖🐖🐖降采样
data1 = data.resample('13s').ffill()
print(data1)
>>>
2018-01-01 00:00:00    1
2018-01-01 00:00:13    1
2018-01-01 00:00:26    1
2018-01-01 00:00:39    1
2018-01-01 00:00:52    1
2018-01-01 00:01:05    2
2018-01-01 00:01:18    2
2018-01-01 00:01:31    2
2018-01-01 00:01:44    2
2018-01-01 00:01:57    2
Freq: 13S, dtype: int64
###################################
----------------------------------------
Exaple2(升采样):

1. 创建一个时间序列，起始日期是2018/01/01，一共2天，每天对应的数值分别是1到2:
rng = pd.date_range('20180101', periods=2)
ts = pd.Series(np.arange(1,2), index=rng)

print(ts)

#### Outputs ####
2018-01-01    1
2018-01-02    2
Freq: D, dtype: int32

2. 升采样就不涉及到closed和label的值，也就是会忽略(筒子们可以验证一下)，所以我们在使用的时候无需设置这两个值。对于升采样，前面也提到，主要是涉及到值的填充。有下面的四种填充方法（实际是三种）：

不填充。那么对应无值的地方，用NaN代替。对应的方法是asfreq。
用前值填充。用前面的值填充无值的地方。对应的方法是ffill或者pad。这里方便记忆，ffill的第一个f是代表forward，向前的意思
用后值填充。对应的方法是bfill，b代表back。

下面是一个例子：
ts_6h_asfreq = ts.resample('6H').asfreq()
print(ts_6h_asfreq)

#### Outputs ####
2018-01-01 00:00:00    1.0
2018-01-01 06:00:00    NaN
2018-01-01 12:00:00    NaN
2018-01-01 18:00:00    NaN
2018-01-02 00:00:00    2.0
Freq: 6H, dtype: float64



尝试：
test= ts.asfreq(freq = '6H')
print(test)  可以达到相同效果；

aa = test.asfreq(freq = '12H')
print(aa)  ----直接将不符合12h间隔的数去掉

#### Outputs ####
2018-01-01 00:00:00    1.0
2018-01-01 12:00:00    NaN
2018-01-02 00:00:00    2.0
Freq: 6H, dtype: float64

**************************************************
#HuangW.py


import pandas as pd
import numpy as np

def time_se_resample(setemp,freq,n_max=10,n_fill=1,fill_value=0,func='sum'):
    df_new=pd.DataFrame(setemp)
    df_new['deltT']=df_new.index.to_series().diff()    # numpy.diff() 同列两两相减或不同列两两相减，参见https://numpy.org/doc/stable/reference/generated/numpy.diff.html
    df_new['deltT'].fillna(pd.Timedelta(seconds=0),inplace=True)
    dT_group=df_new.groupby('deltT').size()   #根据指定列的值进行分组
    maxn_dt=dT_group[dT_group==dT_group.max()].index[0] #找到分组后值最大的（即size()最大）
    df_mask=df_new['deltT']<maxn_dt*n_max
    df_mask=df_mask.astype('int8')
    if freq=='D' : deltT=24.0*3600.0
    if freq=='H' : deltT=3600.0
    if func=='sum':
        se_weighted=setemp*((df_new['deltT']/np.timedelta64(1,'s')).astype(int))*df_mask    #求和；function参考reference
        se_result=se_weighted.resample(freq).sum()/deltT
    if func=='max':
        se_weighted=setemp*df_mask
        se_result=se_weighted.resample(freq).max()
    return(se_result)

#Reference：
>>> x = np.timedelta64(2069211000000000, 'ns')
>>> days = x.astype('timedelta64[D]')
>>> days / np.timedelta64(1, 'D')
23
